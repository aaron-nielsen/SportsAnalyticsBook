[["data-acquisition.html", "Chapter 7 Data Acquisition 7.1 Tabular Data From Sports Reference 7.2 Downloading Datasets From Internet 7.3 Importing Data Using R Libraries", " Chapter 7 Data Acquisition There are many ways to acquire sports data to analyze in R. These include: Manually typing data into a spreadsheet Downloading pre-formatted tabular data from (https://www.sports-reference.com/) Downloading datasets from various internet sources Importing data using R libraries Scraping data from internet websites This chapter will explore these various methods of acquiring data and will also review data visualization and summaries. We will typically use ggplot for visualization and kable for data tables. The R Graph Gallery (http://r-graph-gallery.com/) is a nice resource for visualizations using ggplot. 7.1 Tabular Data From Sports Reference All tabular data on Sports Reference (https://www.sports-reference.com/) can be easily downloaded though a little bit of data wrangling and cleaning is required to prepare the data. Once you have navigated to the page that you want to download data from, click Share &amp; Export, and select Get table as CSV (for Excel). This will generate comma-separated data that you can copy and paste into your favorite text editor. Get table in CSV format Copy data and save as .csv Example 7.1 Acquire the Scoring Regular Season dataset for the Colorado Avalanche 2021–2022 season. This data is located on this webpage: https://www.hockey-reference.com/teams/COL/2022.html. Once the data has been collected, using data wrangling and cleaning methods to transform the dataset into an easier to use format. Use this dataset to explore the relationship between goals, assists, OPS (offensive point shares), and DPS (defensive point shares). # Load data after collection avs21 &lt;- read_csv(&quot;data/avs21.csv&quot;) # Take a look at the first five rows and first five columns avs21 %&gt;% slice_head(n=5) %&gt;% select(1:5) %&gt;% kable(booktabs=T) …1 …2 …3 …4 …5 Rk Player Age Pos GP 1 Mikko Rantanen 25 RW 75 2 Nathan MacKinnon 26 C 65 3 Nazem Kadri 31 C 71 4 Cale Makar 23 D 77 # Remove unnecessary first row during loading avs21 &lt;- read_csv(&quot;data/avs21.csv&quot;,skip = 1) # Select columns of interest avs21 &lt;- avs21 %&gt;% select(Player,G,A,OPS) # Take a look at the first five rows avs21 %&gt;% slice_head(n=5) %&gt;% kable(booktabs=T) Player G A OPS Mikko Rantanen 36 56 7.9 Nathan MacKinnon 32 56 7.7 Nazem Kadri 28 59 7.2 Cale Makar 28 58 8.5 Andre Burakovsky 22 39 4.3 # Make sure to eliminate any extra rows like &quot;Team Totals&quot; avs21 &lt;- avs21 %&gt;% slice(1:n()-1) # Let&#39;s also remove all players that did not have a goal and an assist avs21 &lt;- avs21 %&gt;% filter(G&gt;0 &amp; A &gt;0) Histogram avs21 %&gt;% ggplot(aes(x=G)) + geom_histogram(binwidth = 2,color=&quot;white&quot;,fill=&quot;steelblue&quot;) + labs(x=&quot;Goals&quot;,y=&quot;Count&quot;,title=&quot;Colorado Avalanche Player Goal Counts, 2021-2022 season&quot;) Density plot avs21 %&gt;% ggplot(aes(x=OPS)) + geom_density(fill=&quot;#6F263D&quot;) + labs(x=&quot;Offensive Point Shares (OPS)&quot;,y=&quot;Density&quot;,title=&quot;Colorado Avalanche Player OPS Density, 2021-2022 season&quot;) Scatterplot with Linear Fit avs21 %&gt;% ggplot(aes(x=G,y=OPS)) + geom_point() + geom_smooth(method=lm , fill=&quot;steelblue&quot;, color=&quot;#6F263D&quot;, se=TRUE) + labs(x=&quot;Goals&quot;,y=&quot;Offensive Point Shares (OPS)&quot;,title=&quot;Colorado Avalanche Player Goals and OPS, 2021-2022 season&quot;) Scatterplot with LOESS Smoother avs21 %&gt;% ggplot(aes(x=A,y=OPS)) + geom_point(alpha=0.8,color=&quot;steelblue&quot;) + geom_smooth(method=loess, color=&quot;#6F263D&quot;, se=FALSE) + labs(x=&quot;Assists&quot;,y=&quot;Offensive Point Shares (DPS)&quot;,title=&quot;Colorado Avalanche Player OPS and DPS, 2021-2022 season&quot;) Correlation Matrix Plot library(GGally) ## Registered S3 method overwritten by &#39;GGally&#39;: ## method from ## +.gg ggplot2 avs21 %&gt;% select(-Player) %&gt;% ggpairs() 7.2 Downloading Datasets From Internet We can directly download datasets from the internet if we have a valid url to the datset. Example 7.2 Game-by-game data for the CSU volleyball team is available at: https://aaron-nielsen.github.io/csu_volleyball.csv Download this data and create some visualizations. # Load data from URL url &lt;- &quot;https://aaron-nielsen.github.io/csu_volleyball.csv&quot; csu_vb = read_csv(url,show_col_types = F) # Look at first ten rows and columns csu_vb %&gt;% select(1:10) %&gt;% slice(1:10) %&gt;% kable(booktabs=T) Date Opponent W/L SP K E TA PCT AST SA 8/25/17 Duke L 5 66 28 179 0.212 64 5 8/26/17 Central Florida W 4 56 18 126 0.302 52 7 8/29/17 Northern Colorado W 3 39 8 77 0.403 38 5 9/1/17 vs TCU W 5 62 20 149 0.282 59 6 9/1/17 vs UNC Asheville W 3 41 7 80 0.425 39 8 9/2/17 at Florida State W 3 48 12 95 0.379 45 6 9/8/17 Ball State W 4 59 24 145 0.241 56 6 9/8/17 Michigan W 3 48 8 101 0.396 46 3 9/10/17 Idaho State W 3 46 11 92 0.380 46 4 9/15/17 UAlbany W 3 41 7 73 0.466 36 5 Correlogram # Example adapted from: http://r-graph-gallery.com/97-correlation-ellipses.html # Libraries library(ellipse) library(RColorBrewer) # Use of the mtcars data proposed by R data &lt;- csu_vb %&gt;% select(-(1:3)) %&gt;% cor() # Build a Pannel of 100 colors with Rcolor Brewer my_colors &lt;- brewer.pal(5, &quot;Spectral&quot;) my_colors &lt;- colorRampPalette(my_colors)(100) # Order the correlation matrix ord &lt;- order(data[1, ]) data_ord &lt;- data[ord, ord] plotcorr(data_ord, col=my_colors[data_ord*50+50], mar=c(1,1,1,1)) Correlation Matrix Plot csu_vb %&gt;% select(-(1:3)) %&gt;% ggcorr(method = c(&quot;everything&quot;, &quot;pearson&quot;)) Boxplot csu_vb %&gt;% ggplot(aes(x=`W/L`, y=PCT, fill=`W/L`)) + geom_boxplot(alpha=0.3) + theme(legend.position=&quot;none&quot;) + labs(x=&quot;Match Result&quot;,y=&quot;Hitting Percentage&quot;) + scale_x_discrete(limits = c(&quot;W&quot;, &quot;L&quot;),labels=c(&quot;Wins&quot;,&quot;Losses&quot;)) Violin Plot csu_vb %&gt;% ggplot(aes(x=`W/L`, y=PCT, fill=`W/L`)) + geom_violin() + labs(x=&quot;Match Result&quot;,y=&quot;Hitting Percentage&quot;) + scale_x_discrete(limits = c(&quot;W&quot;, &quot;L&quot;),labels=c(&quot;Wins&quot;,&quot;Losses&quot;)) + theme(legend.position=&quot;none&quot;) 7.3 Importing Data Using R Libraries 7.3.1 BaseballR package The baseballr package allows for scraping data from Baseball Reference, Fangraphs, and Baseball Savant. For more information, visit: https://billpetti.github.io/baseballr/ Example 7.3 Use the baseballr package to obtain game results for the Colorado Rockies in 2022. Create a Kable Table of the first 20 games. library(baseballr) # Scrape data from Baseball Reference rox22 &lt;- bref_team_results(&quot;COL&quot;, 2022) # Select relevant columns and display first 20 games rox22 %&gt;% select(Date,H_A,Opp,Result,R,RA,Time,Attendance) %&gt;% slice(1:20) %&gt;% kable(booktabs=T) Date H_A Opp Result R RA Time Attendance Friday, Apr 8 H LAD L 3 5 3:09 48627 Saturday, Apr 9 H LAD W 3 2 2:48 48087 Sunday, Apr 10 H LAD W 9 4 3:13 40825 Monday, Apr 11 A TEX W 6 4 4:01 35052 Tuesday, Apr 12 A TEX W 4 1 3:09 15862 Thursday, Apr 14 H CHC L 2 5 3:02 24444 Friday, Apr 15 H CHC W 6 5 3:26 35450 Saturday, Apr 16 H CHC W 9 6 2:58 37476 Sunday, Apr 17 H CHC L 4 6 3:19 36391 Monday, Apr 18 H PHI W 4 1 2:53 20403 Tuesday, Apr 19 H PHI W 6 5 3:02 23800 Wednesday, Apr 20 H PHI L 6 9 3:09 21490 Saturday, Apr 23 (1) A DET L 0 13 3:02 37566 Saturday, Apr 23 (2) A DET W 3 2 2:47 28635 Sunday, Apr 24 A DET W 6 2 2:55 20088 Monday, Apr 25 A PHI L 2 8 3:09 20130 Tuesday, Apr 26 A PHI L 3 10 3:19 22300 Wednesday, Apr 27 A PHI L 3 7 3:20 20127 Thursday, Apr 28 A PHI L 1 7 3:08 20098 Friday, Apr 29 H CIN W 10 4 3:25 30206 Example 7.4 Use the baseballr packges to obtain the batting leaderboards for MLB in 2022. Create a table with the top ten players in terms of WAR. # Scrape data from Fangraphs bat22 &lt;- fg_batter_leaders(x = 2022, y = 2022) # Select relevant columns bat22 = bat22 %&gt;% select(Name,Team,OPS,WPA,wRC,WAR) # Arrange by leaders in WAR and print to a Kable table bat22 %&gt;% arrange(desc(WAR)) %&gt;% slice(1:10) %&gt;% kable(booktabs=T) Name Team OPS WPA wRC WAR Aaron Judge NYY 1.111 7.74 162 11.4 Manny Machado SDP 0.898 4.65 110 7.4 Nolan Arenado STL 0.891 2.54 106 7.3 Paul Goldschmidt STL 0.981 4.91 131 7.1 Freddie Freeman LAD 0.918 2.82 128 7.1 Francisco Lindor NYM 0.788 3.76 99 6.8 Yordan Alvarez HOU 1.019 5.22 116 6.6 Jose Altuve HOU 0.921 2.85 111 6.6 Mookie Betts LAD 0.873 4.44 105 6.6 J.T. Realmuto PHI 0.820 0.38 84 6.5 Example 7.5 Using the baseballr package, obtain the top ten leaders for max hit speed along with these players average hit speed, number of barrels, and barrel percent. Present this information in a Kable table. # Scrape Statcast data from Baseball Savant sc_leader &lt;- statcast_leaderboards(leaderboard = &quot;exit_velocity_barrels&quot;,year = 2022) # Select relevant columns sc_leader %&gt;% mutate(Name = paste(first_name, last_name), `Max Hit Speed` = max_hit_speed, `Avg Hit Speed` = avg_hit_speed, `Barrels` = barrels, `Barrel Percent` = brl_percent) %&gt;% select(Name,`Max Hit Speed`,`Avg Hit Speed`,`Barrels`,`Barrel Percent`) %&gt;% arrange(desc(`Max Hit Speed`)) %&gt;% slice(1:10) %&gt;% kable(booktabs=T) Name Max Hit Speed Avg Hit Speed Barrels Barrel Percent Oneil Cruz 122.4 91.9 32 15.5 Giancarlo Stanton 119.8 95.0 51 19.3 Shohei Ohtani 119.1 92.9 72 16.8 Vladimir Guerrero Jr.  118.4 92.8 59 11.2 Aaron Judge 118.4 95.9 106 26.5 Luis Robert Jr.  117.8 89.3 27 8.9 Yordan Alvarez 117.4 95.2 78 21.0 Christian Yelich 117.2 91.5 34 8.2 Julio Rodríguez 117.2 92.0 48 13.1 Rowdy Tellez 116.9 91.1 53 12.9 This is a useful website for obtaining and visualizing StatCast pitch data: https://billpetti.github.io/baseballr/articles/using_statcast_pitch_data.html Example 7.6 Obtain Shohei Ohtani’s pitch data for the 2022 season. Plot the horizontal and vertical break of the pitches. Also, investigate his fastball velocity by inning. More about Ohtani’s pitching repertoire: https://youtu.be/7nZBlYIqEww More about types of pitches: https://youtu.be/1FTFWzcgjHE library(RColorBrewer) # This follows the example at: # https://billpetti.github.io/baseballr/articles/using_statcast_pitch_data.html # ohtani_id &lt;- baseballr::playerid_lookup(last_name = &quot;Ohtani&quot;, first_name = &quot;Shohei&quot;) %&gt;% # pull(mlbam_id) # can get player id for mlbam at: https://razzball.com/mlbamids/ ohtani_id &lt;- &quot;660271&quot; ohtani_data &lt;- baseballr::statcast_search_pitchers(start_date = &quot;2022-03-01&quot;, end_date = &quot;2022-12-01&quot;, pitcherid = &quot;660271&quot;) ohtani_cleaned_data &lt;- ohtani_data %&gt;% # Only keep rows with pitch movement readings # and during the regular season filter(!is.na(pfx_x), !is.na(pfx_z), game_type == &quot;R&quot;) %&gt;% mutate(pfx_x_in_pv = -12*pfx_x, pfx_z_in = 12*pfx_z) colors &lt;- brewer.pal(n = 6, name = &quot;Dark2&quot;) pitch_colors &lt;- c(&quot;4-Seam Fastball&quot; = colors[1], &quot;Sinker&quot; = colors[2], &quot;Cutter&quot; = colors[3], &quot;Curveball&quot; = colors[4], &quot;Slider&quot; = colors[5], &quot;Split-Finger&quot; = colors[6]) ( ohtani_pitch_types &lt;- unique(ohtani_cleaned_data$pitch_name) ) ## [1] &quot;Slider&quot; &quot;Curveball&quot; &quot;Sinker&quot; &quot;Cutter&quot; ## [5] &quot;4-Seam Fastball&quot; &quot;Split-Finger&quot; ohtani_cleaned_data %&gt;% ggplot(aes(x = pfx_x_in_pv, y = pfx_z_in, color = pitch_name)) + geom_vline(xintercept = 0) + geom_hline(yintercept = 0) + geom_point(size = 1.5, alpha = 0.5) + scale_color_manual(values = pitch_colors, limits = ohtani_pitch_types) + scale_x_continuous(limits = c(-25,25), breaks = seq(-20,20, 5), labels = scales::number_format(suffix = &quot;\\&quot;&quot;)) + scale_y_continuous(limits = c(-25,25), breaks = seq(-20,20, 5), labels = scales::number_format(suffix = &quot;\\&quot;&quot;)) + coord_equal() + labs(title = &quot;Shohei Ohtani Pitch Movement&quot;, subtitle = &quot;2022 MLB Season | Pitcher&#39;s POV&quot;, caption = &quot;Data: Baseball Savant via baseballr&quot;, x = &quot;Horizontal Break&quot;, y = &quot;Induced Vertical Break&quot;, color = &quot;Pitch Name&quot;) # Group pitches by inning ohtani_velo_by_inning &lt;- ohtani_cleaned_data %&gt;% filter(pitch_name == &quot;4-Seam Fastball&quot;) %&gt;% group_by(inning, pitch_name) %&gt;% summarize(average_velo = mean(release_speed, na.rm = TRUE)) # Plot average fastball speed by inning ohtani_velo_by_inning %&gt;% ggplot(aes(x = inning, y = average_velo, color = pitch_name)) + geom_line(linewidth = 1.5, alpha = 0.5, show.legend = FALSE) + geom_point(size = 3, show.legend = FALSE) + scale_color_manual(values = pitch_colors) + scale_x_continuous(breaks = 1:9) + scale_y_continuous(limits = c(90, 100)) + labs(title = &quot;Shohei Ohtani 4-Seam Fastball Velo By Inning&quot;, subtitle = &quot;2022 MLB Season&quot;, caption = &quot;Data: Baseball Savant via baseballr&quot;, x = &quot;Inning&quot;, y = &quot;Average Velo&quot;) 7.3.2 nflfastR package The nflfastR package is a helpful package for obtaining play-by-play and roster data for NFL games. For more details, see: https://www.nflfastr.com/articles/nflfastR.html For a quick explanation of expected points added, see: https://youtu.be/qo7-zeJEVzs Example 7.7 Use the nflfastR package to obtain the play-by-play data for the Denver Broncos home game against the San Francisco 49ers during the 2022 season. library(nflfastR) library(gsisdecoder) # First find the game ID by searching Broncos home games in 2022 fast_scraper_schedules(2022) %&gt;% filter(home_team==&quot;DEN&quot;) %&gt;% select(game_id,gameday,away_team,home_team) %&gt;% kable(booktabs=T) game_id gameday away_team home_team 2022_02_HOU_DEN 2022-09-18 HOU DEN 2022_03_SF_DEN 2022-09-25 SF DEN 2022_05_IND_DEN 2022-10-06 IND DEN 2022_07_NYJ_DEN 2022-10-23 NYJ DEN 2022_11_LV_DEN 2022-11-20 LV DEN 2022_14_KC_DEN 2022-12-11 KC DEN 2022_15_ARI_DEN 2022-12-18 ARI DEN 2022_18_LAC_DEN 2023-01-08 LAC DEN # Scrape data for the specific game and display play-by-play data fast_scraper(&quot;2022_03_SF_DEN&quot;) %&gt;% clean_pbp() %&gt;% select(desc, play_type, ep, epa, home_wp) %&gt;% head(10) %&gt;% kable(booktabs=T,digits = 3) %&gt;% column_spec(1, width = &quot;3.5in&quot;) ## [15:34:32] WARNING: src/learner.cc:553: ## If you are loading a serialized model (like pickle in Python, RDS in R) generated by ## older XGBoost, please export the model by calling `Booster.save_model` from that version ## first, then load it back in current version. See: ## ## https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html ## ## for more details about differences between saving model and serializing. ## ## [15:34:32] WARNING: src/learner.cc:553: ## If you are loading a serialized model (like pickle in Python, RDS in R) generated by ## older XGBoost, please export the model by calling `Booster.save_model` from that version ## first, then load it back in current version. See: ## ## https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html ## ## for more details about differences between saving model and serializing. ## ## [15:34:32] WARNING: src/learner.cc:553: ## If you are loading a serialized model (like pickle in Python, RDS in R) generated by ## older XGBoost, please export the model by calling `Booster.save_model` from that version ## first, then load it back in current version. See: ## ## https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html ## ## for more details about differences between saving model and serializing. ## ## [15:34:32] WARNING: src/learner.cc:553: ## If you are loading a serialized model (like pickle in Python, RDS in R) generated by ## older XGBoost, please export the model by calling `Booster.save_model` from that version ## first, then load it back in current version. See: ## ## https://xgboost.readthedocs.io/en/latest/tutorials/saving_model.html ## ## for more details about differences between saving model and serializing. desc play_type ep epa home_wp GAME NA 0.770 0.000 0.567 8-B.McManus kicks 63 yards from DEN 35 to SF 2. 3-R.McCloud to SF 10 for 8 yards (40-J.Strnad). kickoff 0.770 -1.071 0.567 (14:54) (Shotgun) 22-J.Wilson right tackle to SF 12 for 2 yards (99-D.Williams). run -0.301 -0.415 0.589 (14:19) 10-J.Garoppolo pass short left to 19-D.Samuel to SF 25 for 13 yards (21-K.Williams, 22-K.Jackson). pass -0.716 1.559 0.599 (13:42) (Shotgun) 19-D.Samuel left tackle to SF 26 for 1 yard (98-M.Purcell). run 0.843 -0.530 0.567 (13:07) (Shotgun) 10-J.Garoppolo pass incomplete short left to 11-B.Aiyuk (2-P.Surtain). pass 0.313 -0.752 0.585 (13:01) (Shotgun) 10-J.Garoppolo pass incomplete short middle to 85-G.Kittle (97-Dj.Jones). pass -0.438 -1.445 0.610 (12:57) 18-M.Wishnowsky punts 45 yards to DEN 29, Center-46-T.Pepper, out of bounds. punt -1.884 0.035 0.647 (12:50) (Shotgun) 3-R.Wilson pass short right to 33-J.Williams to DEN 31 for 2 yards (57-D.Greenlaw). pass 1.849 -0.587 0.619 (12:24) (No Huddle, Shotgun) 33-J.Williams left guard to DEN 31 for no gain (57-D.Greenlaw; 90-K.Givens). run 1.262 -0.790 0.607 library(nflplotR) # Example from: https://www.nflfastr.com/articles/nflfastR.html pbp &lt;- nflfastR::load_pbp(2022) %&gt;% filter(season_type == &quot;REG&quot;) %&gt;% filter(!is.na(posteam) &amp; (rush == 1 | pass == 1)) offense &lt;- pbp %&gt;% group_by(team = posteam) %&gt;% summarise(off_epa = mean(epa, na.rm = TRUE)) defense &lt;- pbp %&gt;% group_by(team = defteam) %&gt;% summarise(def_epa = mean(epa, na.rm = TRUE)) offense %&gt;% inner_join(defense, by = &quot;team&quot;) %&gt;% ggplot(aes(x = off_epa, y = def_epa)) + geom_abline(slope = -1.5, intercept = c(.4, .3, .2, .1, 0, -.1, -.2, -.3), alpha = .2) + geom_mean_lines(aes(h_var = off_epa, v_var = def_epa)) + geom_nfl_logos(aes(team_abbr = team), width = 0.07, alpha = 0.7) + labs(x = &quot;Offense EPA/play&quot;, y = &quot;Defense EPA/play&quot;, caption = &quot;Data: @nflfastR&quot;, title = &quot;2022 NFL Offensive and Defensive EPA per Play&quot;) + theme_bw() + theme( plot.title = element_text(size = 12, hjust = 0.5, face = &quot;bold&quot;) ) + scale_y_reverse() 7.3.3 hoopR package The hoopR allows for one to access data related to professional and college basketball. Example 7.8 Using the hoopR package, obtain the play-by-play data for the Denver Nuggets vs. Philadelphia 76ers game on January 28, 2023. library(hoopR) # https://www.espn.com/nba/game/_/gameId/401468896 hoopR::espn_nba_pbp(game_id = 401468896) %&gt;% select(`Description`=text,`Play Type`=type_text, Quarter=period_display_value,Points=score_value,Clock=clock_display_value) %&gt;% slice(1:15) %&gt;% kable(booktabs=T) %&gt;% column_spec(1, width = &quot;3in&quot;) %&gt;% column_spec(2, width = &quot;1in&quot;) Description Play Type Quarter Points Clock Nikola Jokic vs. Joel Embiid (Jamal Murray gains possession) Jumpball 1st Quarter 0 12:00 Nikola Jokic misses 11-foot jumper Jump Shot 1st Quarter 0 11:45 James Harden defensive rebound Defensive Rebound 1st Quarter 0 11:41 Joel Embiid makes 6-foot two point shot (James Harden assists) Driving Floating Bank Jump Shot 1st Quarter 2 11:35 Nikola Jokic shooting foul Shooting Foul 1st Quarter 0 11:35 Joel Embiid misses free throw 1 of 1 Free Throw - 1 of 1 1st Quarter 0 11:35 Michael Porter Jr. defensive rebound Defensive Rebound 1st Quarter 0 11:32 Michael Porter Jr. makes 27-foot three point jumper (Kentavious Caldwell-Pope assists) Jump Shot 1st Quarter 3 11:20 Tobias Harris misses 26-foot three point jumper Jump Shot 1st Quarter 0 10:58 Kentavious Caldwell-Pope defensive rebound Defensive Rebound 1st Quarter 0 10:55 Nikola Jokic makes finger roll layup (Jamal Murray assists) Finger Roll Layup 1st Quarter 2 10:48 Joel Embiid makes driving layup (James Harden assists) Driving Layup Shot 1st Quarter 2 10:37 Aaron Gordon makes 16-foot pullup jump shot Pullup Jump Shot 1st Quarter 2 10:25 Joel Embiid makes 14-foot pullup jump shot Pullup Jump Shot 1st Quarter 2 10:12 Joel Embiid shooting foul Shooting Foul 1st Quarter 0 9:59 Example 7.9 Obtain win probability as a function of game time for Colorado State vs. Boise State men’s basketball on January 28, 2023. # Get ID from ESPN game URL: https://www.espn.com/mens-college-basketball/game/_/gameId/401482835 library(hoopR) hoopR::espn_mbb_wp(game_id = 401482835) %&gt;% select(Period=period,`Seconds Remaining`=game_seconds_left,`Home Win Pct`=home_win_percentage,`Play ID`=play_id) %&gt;% slice(1:10) %&gt;% kable(booktabs=T) Period Seconds Remaining Home Win Pct Play ID 1 2375 0.891 401482835101806401 1 2372 0.893 401482835101806701 1 2349 0.913 401482835101809001 1 2322 0.916 401482835101815701 1 2319 0.918 401482835101816001 1 2297 0.934 401482835101818201 1 2273 0.939 401482835101824601 1 2269 0.933 401482835101825001 1 2269 0.924 401482835101825002 1 2238 0.939 401482835101828101 library(ncaahoopR) wp_chart_new(401482835,show_labels = F) ## Scraping Data for Game: 1 of 1 game_flow(game_id = 401482835, home_col = &quot;blue&quot;, away_col = &quot;forestgreen&quot;) ## Scraping Data for Game: 1 of 1 7.3.4 hockeyR package The hockeyR packages allows you to obtain data from NHL.com and Hockey Reference. The sportyR package is useful for plotting spatial data on various playing fields/courts. Example 7.10 Create a shot plot for the Colorado Avalanche vs. St. Louis Blues on January 28, 2023. # Example adapted from: https://hockeyr.netlify.app/ # devtools::install_github(&quot;danmorse314/hockeyR&quot;) library(hockeyR) library(sportyR) pbp &lt;- hockeyR::load_pbp(&#39;2022-2023&#39;) # get single game game &lt;- pbp %&gt;% filter(game_date == &quot;2023-01-28&quot; &amp; home_abbreviation == &quot;COL&quot;) game %&gt;% select(Date=game_date,Period=period,Time=period_time_remaining,Event=event, Description=description) %&gt;% slice(1:15) %&gt;% kable(booktabs=T) Date Period Time Event Description 2023-01-28 1 20:00 Game Scheduled Game Scheduled 2023-01-28 1 20:00 Faceoff J.T. Compher faceoff won against Noel Acciari 2023-01-28 1 19:47 Stoppage Icing 2023-01-28 1 19:47 Faceoff J.T. Compher faceoff won against Noel Acciari 2023-01-28 1 19:35 Takeaway Takeaway by Matt Nieto 2023-01-28 1 19:09 Shot Torey Krug Wrist Shot saved by Alexandar Georgiev 2023-01-28 1 19:09 Stoppage Goalie Stopped 2023-01-28 1 19:09 Faceoff Nathan MacKinnon faceoff won against Brayden Schenn 2023-01-28 1 18:39 Shot Evan Rodrigues Wrist Shot saved by Jordan Binnington 2023-01-28 1 18:07 Hit Andreas Englund hit Logan Brown 2023-01-28 1 17:30 Shot Denis Malgin Wrist Shot saved by Jordan Binnington 2023-01-28 1 17:21 Blocked Shot Samuel Girard shot blocked shot by Niko Mikkola 2023-01-28 1 16:46 Hit Noel Acciari hit Erik Johnson 2023-01-28 1 16:35 Missed Shot Noel Acciari Wide of Net Alexandar Georgiev 2023-01-28 1 16:25 Shot Matt Nieto Wrist Shot saved by Jordan Binnington # grab team logos &amp; colors team_logos &lt;- hockeyR::team_logos_colors %&gt;% filter(team_abbr == unique(game$home_abbreviation) | team_abbr == unique(game$away_abbreviation)) %&gt;% # add in dummy variables to put logos on the ice mutate(x = ifelse(full_team_name == unique(game$home_name), 50, -50), y = 0) # add transparency to logo transparent &lt;- function(img) { magick::image_fx(img, expression = &quot;0.3*a&quot;, channel = &quot;alpha&quot;) } # get only shot events fenwick_events &lt;- c(&quot;MISSED_SHOT&quot;,&quot;SHOT&quot;,&quot;GOAL&quot;) shots &lt;- game %&gt;% filter(event_type %in% fenwick_events) %&gt;% # adding team colors left_join(team_logos, by = c(&quot;event_team_abbr&quot; = &quot;team_abbr&quot;)) # create shot plot geom_hockey(&quot;nhl&quot;) + ggimage::geom_image( data = team_logos, aes(x = x, y = y, image = team_logo_espn), image_fun = transparent, size = 0.22, asp = 2.35 ) + geom_point( data = shots, aes(x_fixed, y_fixed), size = 3, color = shots$team_color1, shape = ifelse(shots$event_type == &quot;GOAL&quot;, 19, 1) ) + labs( title = glue::glue(&quot;{unique(game$away_name)} @ {unique(game$home_name)}&quot;), subtitle = glue::glue( &quot;{unique(game$game_date)}\\n {unique(shots$away_abbreviation)} {unique(shots$away_final)} - {unique(shots$home_final)} {unique(shots$home_abbreviation)}&quot; ), caption = &quot;data from hockeyR | plot made with sportyR&quot; ) + theme( plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5), plot.caption = element_text(hjust = .9)) 7.3.5 worldfootballR The worldfootballR package allows one to access data from FBRef, Understat, and other soccer websites. Example 7.11 Download the match summaries for all US Women’s National Team (USWNT) in the 2019 World Cup. Display this information in a kable table. For more on xG, see: https://youtu.be/zSaeaFcm1SY library(worldfootballR) # USWNT 2019 World Cup results url &lt;- &quot;https://fbref.com/en/squads/1c912aa0/2019/United-States-Women-Stats&quot; uswnt19 &lt;- get_team_match_results(url) uswnt19 %&gt;% filter(Comp == &quot;World Cup&quot;) %&gt;% select(-Day,-Time,-Comp,-Team_Url,-Captain,-Formation, -Referee,-Notes,-Attendance,-Venue,-Team) %&gt;% kable(booktabs=T) Date Round Result GF GA Opponent xG xGA Poss 2019-06-11 Group stage W 13 0 Thailand 7.1 0.1 72 2019-06-16 Group stage W 3 0 Chile 3.7 0.0 71 2019-06-20 Group stage W 2 0 Sweden 2.1 0.4 61 2019-06-24 Round of 16 W 2 1 Spain 2.4 0.2 55 2019-06-28 Quarter-finals W 2 1 France 1.1 1.6 40 2019-07-02 Semi-finals W 2 1 England 0.9 1.7 43 2019-07-07 Final W 2 0 Netherlands 3.0 0.2 53 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
